defmodule NYSETL.Test.Fixtures do
  @moduledoc false

  def read(partial_path, opts \\ []) do
    contents = "test/fixtures/" |> Path.join(partial_path) |> File.read!()

    case opts |> Keyword.get(:decode, false) do
      false -> contents
      :json -> contents |> Jason.decode!()
      :json_atoms -> contents |> Jason.decode!(keys: :atoms)
      other -> raise "Unsupported value for :decode option: #{other}"
    end
  end

  def commcare_case_id(), do: "12345678-1234-1234-1234-123456789012"
  def external_id(), do: "1234567"
  def owner_id(), do: "1234567890"

  def county_domain(), do: "nj-covid-camden"
  def county_fips(), do: "007"
  def test_county_1_fips(), do: "1111"
  def test_county_1_domain(), do: "uk-midsomer-cdcms"
  def test_county_1_location_id(), do: "a1a1a1a1a1"
  def test_county_2_fips(), do: "9999"
  def test_county_2_domain(), do: "sw-yggdrasil-cdcms"
  def test_county_2_location_id(), do: "b2b2b2b22b2"
  def test_county_3_fips(), do: "1234"
  def test_county_3_domain(), do: "uk-statewide-cdcms"
  def nonparticipating_county_fips(), do: "5678"
  def nonparticipating_county_domain(), do: "aq-wilkes-cdcms"
  def statewide_county_fips(), do: "1234"
  def statewide_county_domain(), do: "uk-statewide-cdcms"
  def statewide_county_location_id(), do: "statewide-owner-id"

  def case_response(county_domain, case_id, opts \\ []), do: read("commcare/case_response_#{county_domain}_#{case_id}.json", opts)
  def case_list_response(county_domain, _owner_id, opts \\ []), do: read("commcare/case_list_#{county_domain}.json", opts)
  def cases_response(county_domain, type, offset, opts \\ []), do: read("commcare/cases_response_#{county_domain}_#{type}_#{offset}.json", opts)

  def case_external_id_response(county_domain, external_id, opts \\ []),
    do: read("commcare/case_external_id_response_#{county_domain}_#{external_id}.json", opts)

  def commcare_submit_response(:success), do: do_commcare_submit_response("submit_success")
  def commcare_submit_response(:error), do: do_commcare_submit_response("submit_error")

  defp do_commcare_submit_response(nature) do
    """
    <OpenRosaResponse xmlns=\"http://openrosa.org/http/response\">
      <message nature=\"#{nature}\">message</message>
    </OpenRosaResponse>
    """
  end

  # `county_list_response_ny.json` was generated by running
  #     source ~/.bashrc-prod
  #     curl -H "Authorization: ApiKey $COMMCARE_API_KEY_CREDENTIALS" https://www.commcarehq.org/a/ny-statewide-cdcms/api/v0.5/fixture/?fixture_type=county_list | jq .
  # and reshuffling the result slightly so that the order matched the previous run (and thus produced a smaller diff).
  def county_list_response(opts \\ []), do: read("commcare/county_list_response_ny.json", opts)
  # `county_list_ny.json` was generated by taking `county_list_response_ny.json` and copying
  # only the array.
  def county_list(opts \\ []), do: read("commcare/county_list_ny.json", opts)

  def index_case_data(overrides) do
    Map.merge(
      %{
        "address" => "123 Somewhere St, SomeCity, NY, 12301",
        "address_city" => "SomeCity",
        "address_complete" => "yes",
        "address_county" => "midsomer",
        "address_state" => "NY",
        "address_street" => nil,
        "address_zip" => "12301",
        "analysis_date" => "2020-05-30",
        "case_import_date" => "2020-05-31",
        "contact_phone_number" => "",
        "county_commcare_domain" => "uk-midsomer-cdcms",
        "county_display" => "Midsomer",
        "dob" => "1991-05-30",
        "dob_known" => "yes",
        "doh_mpi_id" => "600000",
        "eclrs_create_date" => "2020-05-31",
        "external_id" => "600000",
        "fips" => "1111",
        "first_name" => "Test",
        "full_name" => "Test User",
        "gaz" => "ms-gaz",
        "gender" => "male",
        "gender_other" => "",
        "has_phone_number" => "no",
        "last_name" => "User",
        "name" => "Test User",
        "name_and_id" => "Test User (600000)",
        "new_lab_result_received" => "yes",
        "owner_id" => "a1a1a1a1a1",
        "patient_type" => "confirmed",
        "phone_home" => ""
      },
      overrides
    )
  end

  def test_result(overrides) do
    Map.merge(
      %{
        county_id: test_county_1_fips(),
        eclrs_create_date: ~U[2020-05-31 12:00:00Z],
        lab_id: "H123",
        lab_name: "Some Lab",
        message_master_key: "15200070260000",
        patient_address_1: "123 Somewhere St",
        patient_address_2: "Suite 555",
        patient_city: "SomeCity",
        patient_dob: ~D[1960-01-01],
        patient_gender: "M",
        patient_key: "12345",
        patient_name_first: "Test",
        patient_name_last: "User",
        patient_name_middle: "D",
        patient_phone_home: "(123) 123-4567",
        patient_phone_home_normalized: "1231234567",
        patient_updated_at: ~U[2020-05-31 06:00:00Z],
        patient_zip: "12301",
        request_accession_number: "ABC123",
        request_collection_date: ~U[2020-05-30 03:59:00Z],
        request_facility_address_1: "456 Somewhere Else",
        request_facility_address_2: "Suite 0",
        request_facility_city: "OtherCity",
        request_facility_code: "33D070681111",
        request_facility_name: "My Lab",
        request_phone_facility: "312-123-4567",
        request_phone_facility_normalized: "3121234567",
        request_provider_address_1: "456 Somewhere Else",
        request_provider_city: "OtterCity",
        request_provider_id: "A123",
        request_provider_name_first: "Dr",
        request_provider_name_last: "Doctor",
        request_specimen_source_name: "Nasopharyngeal swab",
        result: "POSITIVE",
        result_analysis_date: ~U[2020-05-30 05:00:00Z],
        result_local_test_code: "CULT",
        result_local_test_desc: "CULTURE",
        result_loinc_code: "41852-5",
        result_loinc_desc: "Microorganism or agent identified in Unspecified specimen",
        result_observation_date: ~U[2020-05-30 04:30:00Z],
        result_observation_text: "Yucky!!!",
        result_observation_text_short: "Yuck",
        result_producer_lab_name: "My Lab (tm)",
        result_snomed_code: "7654",
        result_snomed_desc: "Detected",
        result_status_code: "F",
        sending_facility_clia: "31D0696246"
      },
      Enum.into(overrides, %{})
    )
  end

  def commcare_case_response(case_id, overrides) do
    %{
      "case_id" => case_id,
      "child_cases" => %{},
      "closed" => false,
      "date_closed" => nil,
      "date_modified" => "2020-06-05T00:56:45.753000Z",
      "domain" => "uk-midsomer-cdcms",
      "id" => "12345678-1234-1234-1234-123456789012",
      "indexed_on" => "2020-06-03T18:54:40.800511",
      "indices" => %{},
      "opened_by" => "981e67ff7acd41faab58094033996fdc",
      "properties" =>
        Map.merge(
          %{
            "address" => "",
            "address_city" => "",
            "address_complete" => "no",
            "address_county" => "",
            "address_municipality" => "",
            "address_state" => "",
            "address_street" => "",
            "address_street_2" => "",
            "address_zip" => "",
            "case_import_date" => "2020-06-04",
            "case_name" => " ",
            "case_notes" => "",
            "case_type" => "patient",
            "county_id" => "",
            "covid_start_date" => "",
            "created_manually" => "yes",
            "current_status" => "open",
            "date_opened" => "2020-06-05T00:56:45.753000Z",
            "dob" => "",
            "ethnicity" => "",
            "external_id" => "cdrss_id_1",
            "first_name" => "",
            "full_name" => "",
            "gender" => "female",
            "has_phone_number" => "no",
            "hospital_admission_date" => "",
            "hospitalized" => "",
            "icu" => "",
            "intubated" => "",
            "lab_results_ordering_facility" => "",
            "lab_results_ordering_provider" => "",
            "last_name" => "",
            "mpi_id" => "",
            "name" => "",
            "next_form" => "ci_form",
            "ordering_provider_primary_phone" => "",
            "owner_id" => "2021db2fb7b14669939d51ace0c2844f",
            "patient_type" => "confirmed",
            "phone_cell" => "",
            "phone_work" => "",
            "primary_language" => "",
            "race" => "",
            "specimen_collection_date" => "",
            "underlying_conditions_selected" => ""
          },
          overrides
        ),
      "resource_uri" => "",
      "server_date_modified" => "2020-06-03T18:53:54.802833Z",
      "server_date_opened" => "2020-06-03T18:53:54.802833Z",
      "user_id" => "981e67ff7acd41faab58094033996fdc",
      "xform_ids" => [
        "d9c0c4ea-6731-4f80-97f6-0e9d36573f5b"
      ]
    }
  end
end
