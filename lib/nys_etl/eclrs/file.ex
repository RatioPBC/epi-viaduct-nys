defmodule NYSETL.ECLRS.File do
  use NYSETL, :schema

  defmodule HeaderError do
    defexception [:message]
  end

  @header_v1 "PIDLASTNAME|PIDMIDDLENAME|PIDFIRSTNAME|PIDDATEOFBIRTH|PIDSEXCODE|PIDADDRESSLINE1|PIDADDRESSLINE2|PIDCITY|PIDZIPCODE|PIDCOUNTYCODE|PIDHOMEPHONE|MSHLABPFI|MSHSENDINGFACILITYCLIA|MSHSENDINGFACILITYNAME|PIDPATIENTKEY|ZLRFACILITYADDRESSLINE1|ZLRFACILITYADDRESSLINE2|ZLRFACILITYCITY|ZLRFACILITYCODE|ZLRFACILITYNAME|ZLRFACILITYPHONE|ZLRPROVIDERADDRESSLINE1|ZLRPROVIDERCITY|OBRPROVIDERID|OBRPROVIDERFIRSTNAME|OBRPROVIDERLASTNAME|OBRCOLLECTIONDATE|OBRCREATEDATE|OBXLOCALTESTCODE|OBXLOCALTESTDESC|OBXLOINCCODE|OBXLOINCDESC|OBXOBSERVATIONDATE|OBXOBSERVATIONRESULTTEXT|OBXOBSERVATIONRESULTTEXTSHORT|OBXRESULTSTATUSCODE|OBXPRODUCERLABNAME|OBXSNOMEDCODE|OBXSNOMEDDESC|OBRACCESSIONNUM|OBXANALYSISDATE|OBRSPECIMENSOURCENAME|MSHMESSAGEMASTERKEY|PIDUPDATEDATE|RESULTPOSITIVE"
  @header_v1_names String.split(@header_v1, "|")
  @header_v2 "PIDLASTNAME|PIDMIDDLENAME|PIDFIRSTNAME|PIDDATEOFBIRTH|PIDSEXCODE|PIDADDRESSLINE1|PIDADDRESSLINE2|PIDCITY|PIDZIPCODE|PIDCOUNTYCODE|PIDHOMEPHONE|MSHLABPFI|MSHSENDINGFACILITYCLIA|MSHSENDINGFACILITYNAME|PIDPATIENTKEY|ZLRFACILITYADDRESSLINE1|ZLRFACILITYADDRESSLINE2|ZLRFACILITYCITY|ZLRFACILITYCODE|ZLRFACILITYNAME|ZLRFACILITYPHONE|ZLRPROVIDERADDRESSLINE1|ZLRPROVIDERCITY|OBRPROVIDERID|OBRPROVIDERFIRSTNAME|OBRPROVIDERLASTNAME|OBRCOLLECTIONDATE|OBRCREATEDATE|OBXLOCALTESTCODE|OBXLOCALTESTDESC|OBXLOINCCODE|OBXLOINCDESC|OBXOBSERVATIONDATE|OBXOBSERVATIONRESULTTEXT|OBXOBSERVATIONRESULTTEXTSHORT|OBXRESULTSTATUSCODE|OBXPRODUCERLABNAME|OBXSNOMEDCODE|OBXSNOMEDDESC|OBRACCESSIONNUM|OBXANALYSISDATE|OBRSPECIMENSOURCENAME|MSHMESSAGEMASTERKEY|PIDUPDATEDATE|PIDEMPLOYERNAME|PIDEMPLOYERADDRESS|PIDEMPLOYERPHONE|PIDEMPLOYERPHONEALT|PIDEMPLOYEENUMBER|PIDEMPLOYEEJOBTITLE|PIDSCHOOLNAME|PIDSCHOOLDISTRICT|PIDSCHOOLCODE|PIDSCHOOLJOBCLASS|PIDSCHOOLPRESENT|RESULTPOSITIVE"
  @header_v2_names String.split(@header_v2, "|")

  schema "files" do
    field :filename, :string
    field :processing_started_at, :utc_datetime_usec
    field :processing_completed_at, :utc_datetime_usec
    field :statistics, :map
    field :eclrs_version, :integer
    field :tid, :string
    timestamps()
  end

  def changeset(struct \\ %__MODULE__{}, attrs) do
    struct
    |> cast(attrs, [:filename, :processing_started_at, :processing_completed_at, :statistics, :eclrs_version, :tid])
    |> validate_required(:filename)
  end

  def version_number(version), do: Map.fetch!(%{v1: 1, v2: 2}, version)

  def file_header(:v1), do: @header_v1
  def file_header(:v2), do: @header_v2

  def header_names(:v1), do: @header_v1_names
  def header_names(:v2), do: @header_v2_names

  def file_headers(@header_v1), do: {:v1, @header_v1_names}
  def file_headers(@header_v2), do: {:v2, @header_v2_names}
  def file_headers(other), do: raise(HeaderError, message: "Unexpected header, got: #{inspect(other)}")
end
