searchNodes=[{"doc":"","ref":"ECLRSParser.html","title":"ECLRSParser","type":"module"},{"doc":"Callback implementation for NimbleCSV.dump_to_iodata/1.","ref":"ECLRSParser.html#dump_to_iodata/1","title":"ECLRSParser.dump_to_iodata/1","type":"function"},{"doc":"Callback implementation for NimbleCSV.dump_to_stream/1.","ref":"ECLRSParser.html#dump_to_stream/1","title":"ECLRSParser.dump_to_stream/1","type":"function"},{"doc":"Callback implementation for NimbleCSV.parse_enumerable/2.","ref":"ECLRSParser.html#parse_enumerable/2","title":"ECLRSParser.parse_enumerable/2","type":"function"},{"doc":"Callback implementation for NimbleCSV.parse_stream/2.","ref":"ECLRSParser.html#parse_stream/2","title":"ECLRSParser.parse_stream/2","type":"function"},{"doc":"Callback implementation for NimbleCSV.parse_string/2.","ref":"ECLRSParser.html#parse_string/2","title":"ECLRSParser.parse_string/2","type":"function"},{"doc":"Implements the Jason.Encoder protocol for HTTPoison.Error structs.This is executed (at the least) in the context of errors interacting with external services, where the error may be reported to Sentry.","ref":"JsonEncodingHttpoison.html","title":"JsonEncodingHttpoison","type":"module"},{"doc":"NYSETL keeps the contexts that define your domain and business logic.Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"NYSETL.html","title":"NYSETL","type":"module"},{"doc":"Defines an Ecto.Schema module.Examplesdefmodule NYSETL.MySchema do use NYSETL, :schema schema &quot;my_schemas&quot; do field :tid, :string end end","ref":"NYSETL.html#schema/0","title":"NYSETL.schema/0","type":"function"},{"doc":"","ref":"NYSETL.Backfillers.html","title":"NYSETL.Backfillers","type":"module"},{"doc":"","ref":"NYSETL.Backfillers.html#backfill_files_eclrs_version/0","title":"NYSETL.Backfillers.backfill_files_eclrs_version/0","type":"function"},{"doc":"","ref":"NYSETL.ChangeLog.html","title":"NYSETL.ChangeLog","type":"module"},{"doc":"","ref":"NYSETL.ChangeLog.html#changeset/1","title":"NYSETL.ChangeLog.changeset/1","type":"function"},{"doc":"Context to encapsulate Ecto schemas around data prepared to be loaded into CommCare.","ref":"NYSETL.Commcare.html","title":"NYSETL.Commcare","type":"module"},{"doc":"","ref":"NYSETL.Commcare.html#add_patient_key/2","title":"NYSETL.Commcare.add_patient_key/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#create_index_case/2","title":"NYSETL.Commcare.create_index_case/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#create_lab_result/2","title":"NYSETL.Commcare.create_lab_result/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#create_person/1","title":"NYSETL.Commcare.create_person/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#external_id/1","title":"NYSETL.Commcare.external_id/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#get_index_case/1","title":"NYSETL.Commcare.get_index_case/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#get_index_cases/2","title":"NYSETL.Commcare.get_index_cases/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#get_lab_results/1","title":"NYSETL.Commcare.get_lab_results/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#get_lab_results/2","title":"NYSETL.Commcare.get_lab_results/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#get_person/1","title":"NYSETL.Commcare.get_person/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#save_event/2","title":"NYSETL.Commcare.save_event/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#update_index_case/3","title":"NYSETL.Commcare.update_index_case/3","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#update_index_case_from_commcare_data/2","title":"NYSETL.Commcare.update_index_case_from_commcare_data/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.html#update_lab_result/3","title":"NYSETL.Commcare.update_lab_result/3","type":"function"},{"doc":"","ref":"NYSETL.Crypto.html","title":"NYSETL.Crypto","type":"module"},{"doc":"","ref":"NYSETL.Crypto.html#sha256/1","title":"NYSETL.Crypto.sha256/1","type":"function"},{"doc":"Context to encapsulate Ecto schemas around data extracted from ECLRS files.","ref":"NYSETL.ECLRS.html","title":"NYSETL.ECLRS","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.html#change_about/2","title":"NYSETL.ECLRS.change_about/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#create_about/1","title":"NYSETL.ECLRS.create_about/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#create_file/1","title":"NYSETL.ECLRS.create_file/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#create_test_result/1","title":"NYSETL.ECLRS.create_test_result/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#find_or_create_county/1","title":"NYSETL.ECLRS.find_or_create_county/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#fingerprint/1","title":"NYSETL.ECLRS.fingerprint/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#finish_processing_file/2","title":"NYSETL.ECLRS.finish_processing_file/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#get_about/1","title":"NYSETL.ECLRS.get_about/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#get_about_by_version/1","title":"NYSETL.ECLRS.get_about_by_version/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#get_county/1","title":"NYSETL.ECLRS.get_county/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#get_file/1","title":"NYSETL.ECLRS.get_file/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#save_event/2","title":"NYSETL.ECLRS.save_event/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#update_about/2","title":"NYSETL.ECLRS.update_about/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#update_file/2","title":"NYSETL.ECLRS.update_file/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.html#update_last_seen_file/2","title":"NYSETL.ECLRS.update_last_seen_file/2","type":"function"},{"doc":"","ref":"NYSETL.Event.html","title":"NYSETL.Event","type":"module"},{"doc":"","ref":"NYSETL.Event.html#changeset/2","title":"NYSETL.Event.changeset/2","type":"function"},{"doc":"Given a thing, format that thing for output.","ref":"NYSETL.Format.html","title":"NYSETL.Format","type":"module"},{"doc":"","ref":"NYSETL.Format.html#format/2","title":"NYSETL.Format.format/2","type":"function"},{"doc":"","ref":"NYSETL.Format.html#us_phone_number/1","title":"NYSETL.Format.us_phone_number/1","type":"function"},{"doc":"Functions that can be called in an Elixir release to setup dependencies where Mix is not present.","ref":"NYSETL.Release.html","title":"NYSETL.Release","type":"module"},{"doc":"","ref":"NYSETL.Release.html#migrate/0","title":"NYSETL.Release.migrate/0","type":"function"},{"doc":"","ref":"NYSETL.Release.html#rollback/2","title":"NYSETL.Release.rollback/2","type":"function"},{"doc":"Seed the database with known required data.County records, based on fips codes found in CommCare's county fixtures","ref":"NYSETL.Release.html#seed/0","title":"NYSETL.Release.seed/0","type":"function"},{"doc":"Callbacks and common additional functions for interacting with the NYSETL database.","ref":"NYSETL.Repo.html","title":"NYSETL.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3.","ref":"NYSETL.Repo.html#aggregate/3","title":"NYSETL.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4.","ref":"NYSETL.Repo.html#aggregate/4","title":"NYSETL.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2.","ref":"NYSETL.Repo.html#all/2","title":"NYSETL.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2.","ref":"NYSETL.Repo.html#checkout/2","title":"NYSETL.Repo.checkout/2","type":"function"},{"doc":"","ref":"NYSETL.Repo.html#child_spec/1","title":"NYSETL.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0.","ref":"NYSETL.Repo.html#config/0","title":"NYSETL.Repo.config/0","type":"function"},{"doc":"Issue a count query on an Ecto.Queryable, which could be a schema module, or a Ecto.Query.Examplesiex&gt; NYSETL.ECLRS.TestResult |&gt; NYSETL.Repo.count() 0","ref":"NYSETL.Repo.html#count/1","title":"NYSETL.Repo.count/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1.","ref":"NYSETL.Repo.html#default_options/1","title":"NYSETL.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2.","ref":"NYSETL.Repo.html#delete/2","title":"NYSETL.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2.","ref":"NYSETL.Repo.html#delete!/2","title":"NYSETL.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2.","ref":"NYSETL.Repo.html#delete_all/2","title":"NYSETL.Repo.delete_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2.","ref":"NYSETL.Repo.html#exists?/2","title":"NYSETL.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query.See Ecto.Adapters.SQL.explain/4 for more information.","ref":"NYSETL.Repo.html#explain/3","title":"NYSETL.Repo.explain/3","type":"function"},{"doc":"Return the first row from an Ecto.Queryable, which could be a schema module, or a Ecto.Query. Rows are ordered by asc: :id unless specified using the :order_by option.Examplesiex&gt; NYSETL.ECLRS.TestResult |&gt; NYSETL.Repo.first() nil iex&gt; NYSETL.ECLRS.TestResult |&gt; NYSETL.Repo.first(order_by: [asc: :id]) nil","ref":"NYSETL.Repo.html#first/2","title":"NYSETL.Repo.first/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3.","ref":"NYSETL.Repo.html#get/3","title":"NYSETL.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3.","ref":"NYSETL.Repo.html#get!/3","title":"NYSETL.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3.","ref":"NYSETL.Repo.html#get_by/3","title":"NYSETL.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3.","ref":"NYSETL.Repo.html#get_by!/3","title":"NYSETL.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0.","ref":"NYSETL.Repo.html#get_dynamic_repo/0","title":"NYSETL.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0.","ref":"NYSETL.Repo.html#in_transaction?/0","title":"NYSETL.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2.","ref":"NYSETL.Repo.html#insert/2","title":"NYSETL.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2.","ref":"NYSETL.Repo.html#insert!/2","title":"NYSETL.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3.","ref":"NYSETL.Repo.html#insert_all/3","title":"NYSETL.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2.","ref":"NYSETL.Repo.html#insert_or_update/2","title":"NYSETL.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2.","ref":"NYSETL.Repo.html#insert_or_update!/2","title":"NYSETL.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2.","ref":"NYSETL.Repo.html#load/2","title":"NYSETL.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2.","ref":"NYSETL.Repo.html#one/2","title":"NYSETL.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2.","ref":"NYSETL.Repo.html#one!/2","title":"NYSETL.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3.","ref":"NYSETL.Repo.html#preload/3","title":"NYSETL.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3.","ref":"NYSETL.Repo.html#prepare_query/3","title":"NYSETL.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1.","ref":"NYSETL.Repo.html#put_dynamic_repo/1","title":"NYSETL.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query.See Ecto.Adapters.SQL.query/4 for more information.","ref":"NYSETL.Repo.html#query/3","title":"NYSETL.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query.See Ecto.Adapters.SQL.query!/4 for more information.","ref":"NYSETL.Repo.html#query!/3","title":"NYSETL.Repo.query!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2.","ref":"NYSETL.Repo.html#reload/2","title":"NYSETL.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2.","ref":"NYSETL.Repo.html#reload!/2","title":"NYSETL.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1.","ref":"NYSETL.Repo.html#rollback/1","title":"NYSETL.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1.","ref":"NYSETL.Repo.html#start_link/1","title":"NYSETL.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1.","ref":"NYSETL.Repo.html#stop/1","title":"NYSETL.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2.","ref":"NYSETL.Repo.html#stream/2","title":"NYSETL.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL.See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"NYSETL.Repo.html#to_sql/2","title":"NYSETL.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2.","ref":"NYSETL.Repo.html#transaction/2","title":"NYSETL.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2.","ref":"NYSETL.Repo.html#update/2","title":"NYSETL.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2.","ref":"NYSETL.Repo.html#update!/2","title":"NYSETL.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3.","ref":"NYSETL.Repo.html#update_all/3","title":"NYSETL.Repo.update_all/3","type":"function"},{"doc":"","ref":"NYSETL.ViaductSupervisor.html","title":"NYSETL.ViaductSupervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.ViaductSupervisor.html#child_spec/1","title":"NYSETL.ViaductSupervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for Supervisor.init/1.","ref":"NYSETL.ViaductSupervisor.html#init/1","title":"NYSETL.ViaductSupervisor.init/1","type":"function"},{"doc":"","ref":"NYSETL.ViaductSupervisor.html#start_link/1","title":"NYSETL.ViaductSupervisor.start_link/1","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on.This can be used in your application as:use NYSETLWeb, :controller use NYSETLWeb, :viewThe definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases.Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"NYSETLWeb.html","title":"NYSETLWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"NYSETLWeb.html#__using__/1","title":"NYSETLWeb.__using__/1","type":"macro"},{"doc":"","ref":"NYSETLWeb.html#channel/0","title":"NYSETLWeb.channel/0","type":"function"},{"doc":"","ref":"NYSETLWeb.html#controller/0","title":"NYSETLWeb.controller/0","type":"function"},{"doc":"","ref":"NYSETLWeb.html#live_component/0","title":"NYSETLWeb.live_component/0","type":"function"},{"doc":"","ref":"NYSETLWeb.html#live_view/0","title":"NYSETLWeb.live_view/0","type":"function"},{"doc":"","ref":"NYSETLWeb.html#router/0","title":"NYSETLWeb.router/0","type":"function"},{"doc":"","ref":"NYSETLWeb.html#view/0","title":"NYSETLWeb.view/0","type":"function"},{"doc":"","ref":"NYSETL.Backfillers.FilesECLRSVersion.html","title":"NYSETL.Backfillers.FilesECLRSVersion","type":"module"},{"doc":"","ref":"NYSETL.Backfillers.FilesECLRSVersion.html#backfill_all/1","title":"NYSETL.Backfillers.FilesECLRSVersion.backfill_all/1","type":"function"},{"doc":"Wraps calls to CommCare.","ref":"NYSETL.Commcare.Api.html","title":"NYSETL.Commcare.Api","type":"module"},{"doc":"","ref":"NYSETL.Commcare.Api.html#cache_spec/1","title":"NYSETL.Commcare.Api.cache_spec/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#get_case/1","title":"NYSETL.Commcare.Api.get_case/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#get_case_from_url/1","title":"NYSETL.Commcare.Api.get_case_from_url/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#get_case_list/1","title":"NYSETL.Commcare.Api.get_case_list/1","type":"function"},{"doc":"Get list of cases by type from county domain.Options:county_domain : ny-statewide-cdcms:type : patient | lab_result:offset : 0:full : include child cases : true | false:modified_since : start of day : ~D[2020-07-20]","ref":"NYSETL.Commcare.Api.html#get_cases/1","title":"NYSETL.Commcare.Api.get_cases/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#get_county_list/2","title":"NYSETL.Commcare.Api.get_county_list/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#get_transfer_cases/1","title":"NYSETL.Commcare.Api.get_transfer_cases/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#http_get_county_list/0","title":"NYSETL.Commcare.Api.http_get_county_list/0","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#ping/0","title":"NYSETL.Commcare.Api.ping/0","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Api.html#post_case/2","title":"NYSETL.Commcare.Api.post_case/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.html","title":"NYSETL.Commcare.CountiesCache","type":"module"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.html#get/1","title":"NYSETL.Commcare.CountiesCache.get/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.html#start_link/1","title":"NYSETL.Commcare.CountiesCache.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.html","title":"NYSETL.Commcare.CountiesCache.Server","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Commcare.CountiesCache.Server.html#child_spec/1","title":"NYSETL.Commcare.CountiesCache.Server.child_spec/1","type":"function"},{"doc":"Callback implementation for GenServer.init/1.","ref":"NYSETL.Commcare.CountiesCache.Server.html#init/1","title":"NYSETL.Commcare.CountiesCache.Server.init/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.html#new/1","title":"NYSETL.Commcare.CountiesCache.Server.new/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.html#start_link/1","title":"NYSETL.Commcare.CountiesCache.Server.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.html#t:t/0","title":"NYSETL.Commcare.CountiesCache.Server.t/0","type":"type"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.Refresher.html","title":"NYSETL.Commcare.CountiesCache.Server.Refresher","type":"module"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.Refresher.html#refresh!/3","title":"NYSETL.Commcare.CountiesCache.Server.Refresher.refresh!/3","type":"function"},{"doc":"","ref":"NYSETL.Commcare.CountiesCache.Server.Refresher.html#refresh_task/3","title":"NYSETL.Commcare.CountiesCache.Server.Refresher.refresh_task/3","type":"function"},{"doc":"","ref":"NYSETL.Commcare.County.html","title":"NYSETL.Commcare.County","type":"module"},{"doc":"","ref":"NYSETL.Commcare.County.html#all_counties/1","title":"NYSETL.Commcare.County.all_counties/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.County.html#get/2","title":"NYSETL.Commcare.County.get/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.County.html#participating_counties/1","title":"NYSETL.Commcare.County.participating_counties/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.County.html#statewide_county/1","title":"NYSETL.Commcare.County.statewide_county/1","type":"function"},{"doc":"","ref":"NYSETL.Commcare.IndexCase.html","title":"NYSETL.Commcare.IndexCase","type":"module"},{"doc":"","ref":"NYSETL.Commcare.IndexCase.html#changeset/2","title":"NYSETL.Commcare.IndexCase.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.IndexCaseEvent.html","title":"NYSETL.Commcare.IndexCaseEvent","type":"module"},{"doc":"","ref":"NYSETL.Commcare.IndexCaseEvent.html#changeset/2","title":"NYSETL.Commcare.IndexCaseEvent.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.LabResult.html","title":"NYSETL.Commcare.LabResult","type":"module"},{"doc":"","ref":"NYSETL.Commcare.LabResult.html#changeset/2","title":"NYSETL.Commcare.LabResult.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.Commcare.Person.html","title":"NYSETL.Commcare.Person","type":"module"},{"doc":"","ref":"NYSETL.Commcare.Person.html#changeset/2","title":"NYSETL.Commcare.Person.changeset/2","type":"function"},{"doc":"Persists metadata about an ECRLS.TestResult.","ref":"NYSETL.ECLRS.About.html","title":"NYSETL.ECLRS.About","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.About.html#changeset/2","title":"NYSETL.ECLRS.About.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.About.html#from_test_result/3","title":"NYSETL.ECLRS.About.from_test_result/3","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.About.Checksums.html","title":"NYSETL.ECLRS.About.Checksums","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.Checksum.html","title":"NYSETL.ECLRS.Checksum","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.Checksum.html#checksum/3","title":"NYSETL.ECLRS.Checksum.checksum/3","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.Checksum.html#checksums/2","title":"NYSETL.ECLRS.Checksum.checksums/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.County.html","title":"NYSETL.ECLRS.County","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.County.html#changeset/2","title":"NYSETL.ECLRS.County.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html","title":"NYSETL.ECLRS.File","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.File.html#changeset/2","title":"NYSETL.ECLRS.File.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#file_header/1","title":"NYSETL.ECLRS.File.file_header/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#file_headers/1","title":"NYSETL.ECLRS.File.file_headers/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#header_names/1","title":"NYSETL.ECLRS.File.header_names/1","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#pad_fields/3","title":"NYSETL.ECLRS.File.pad_fields/3","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#parse_row/2","title":"NYSETL.ECLRS.File.parse_row/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#truncate_fields_to_version/2","title":"NYSETL.ECLRS.File.truncate_fields_to_version/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.File.html#version_number/1","title":"NYSETL.ECLRS.File.version_number/1","type":"function"},{"doc":"Represents a unique row from an ECLRS file.The raw text of the row is persisted as :raw_data. A checksum of the raw data is persisted in the associated About record, as test_result.about.checksum.","ref":"NYSETL.ECLRS.TestResult.html","title":"NYSETL.ECLRS.TestResult","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.TestResult.html#changeset/2","title":"NYSETL.ECLRS.TestResult.changeset/2","type":"function"},{"doc":"","ref":"NYSETL.ECLRS.TestResultEvent.html","title":"NYSETL.ECLRS.TestResultEvent","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.TestResultEvent.html#changeset/2","title":"NYSETL.ECLRS.TestResultEvent.changeset/2","type":"function"},{"doc":"Reads an ECLRS file and processes it with high concurrency.","ref":"NYSETL.Engines.E1.Broadway.html","title":"NYSETL.Engines.E1.Broadway","type":"module"},{"doc":"","ref":"NYSETL.Engines.E1.Broadway.html#ack/3","title":"NYSETL.Engines.E1.Broadway.ack/3","type":"function"},{"doc":"Callback implementation for Broadway.handle_batch/4.","ref":"NYSETL.Engines.E1.Broadway.html#handle_batch/4","title":"NYSETL.Engines.E1.Broadway.handle_batch/4","type":"function"},{"doc":"Callback implementation for Broadway.handle_failed/2.","ref":"NYSETL.Engines.E1.Broadway.html#handle_failed/2","title":"NYSETL.Engines.E1.Broadway.handle_failed/2","type":"function"},{"doc":"Callback implementation for Broadway.handle_message/3.","ref":"NYSETL.Engines.E1.Broadway.html#handle_message/3","title":"NYSETL.Engines.E1.Broadway.handle_message/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Broadway.html#start_link/1","title":"NYSETL.Engines.E1.Broadway.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Broadway.html#transform/2","title":"NYSETL.Engines.E1.Broadway.transform/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Broadway.html#warn/1","title":"NYSETL.Engines.E1.Broadway.warn/1","type":"function"},{"doc":"Wrapper for Cachex, providing a large number of checksum caches under a supervision tree. While Cachex provides non-blocking reads and writes for caches, transactions for a specific cache block other transactions via a single GenServer message queue.This supervision tree improves the concurrency of transactions by providing a cache ring of N caches, using :erlang.phash2/2 to deterministically assign each checksum to a member of the ring.","ref":"NYSETL.Engines.E1.Cache.html","title":"NYSETL.Engines.E1.Cache","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Engines.E1.Cache.html#child_spec/1","title":"NYSETL.Engines.E1.Cache.child_spec/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#clear/0","title":"NYSETL.Engines.E1.Cache.clear/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#dump/1","title":"NYSETL.Engines.E1.Cache.dump/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#get/1","title":"NYSETL.Engines.E1.Cache.get/1","type":"function"},{"doc":"See Cachex.get/2.","ref":"NYSETL.Engines.E1.Cache.html#get/2","title":"NYSETL.Engines.E1.Cache.get/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#load/1","title":"NYSETL.Engines.E1.Cache.load/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#put!/2","title":"NYSETL.Engines.E1.Cache.put!/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#put!/3","title":"NYSETL.Engines.E1.Cache.put!/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#start_link/1","title":"NYSETL.Engines.E1.Cache.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Cache.html#transaction/2","title":"NYSETL.Engines.E1.Cache.transaction/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.ECLRSFileExtractor.html","title":"NYSETL.Engines.E1.ECLRSFileExtractor","type":"module"},{"doc":"","ref":"NYSETL.Engines.E1.ECLRSFileExtractor.html#extract/1","title":"NYSETL.Engines.E1.ECLRSFileExtractor.extract/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.ECLRSFileExtractor.html#extract!/1","title":"NYSETL.Engines.E1.ECLRSFileExtractor.extract!/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.ECLRSFileExtractor.html#finished?/0","title":"NYSETL.Engines.E1.ECLRSFileExtractor.finished?/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.ECLRSFileExtractor.html#wait/0","title":"NYSETL.Engines.E1.ECLRSFileExtractor.wait/0","type":"function"},{"doc":"Broadway producer to read an ECLRS file and message the state machine in State when the end of the file has been reached.","ref":"NYSETL.Engines.E1.FileReader.html","title":"NYSETL.Engines.E1.FileReader","type":"module"},{"doc":"Callback implementation for GenStage.handle_demand/2.","ref":"NYSETL.Engines.E1.FileReader.html#handle_demand/2","title":"NYSETL.Engines.E1.FileReader.handle_demand/2","type":"function"},{"doc":"Callback implementation for GenStage.handle_info/2.","ref":"NYSETL.Engines.E1.FileReader.html#handle_info/2","title":"NYSETL.Engines.E1.FileReader.handle_info/2","type":"function"},{"doc":"Callback implementation for GenStage.init/1.","ref":"NYSETL.Engines.E1.FileReader.html#init/1","title":"NYSETL.Engines.E1.FileReader.init/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.FileReader.html#new/1","title":"NYSETL.Engines.E1.FileReader.new/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.FileReader.html#read/2","title":"NYSETL.Engines.E1.FileReader.read/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.FileReader.html#start_link/1","title":"NYSETL.Engines.E1.FileReader.start_link/1","type":"function"},{"doc":"Info about a specific row from an ECLRS file. Generates a checksum for that row, for discovering when a row exactly matches something that has already been processed.If a row is unique, it represents either a new lab result or an update to an existing lab result, and is parse'd as a new TestResult record.","ref":"NYSETL.Engines.E1.Message.html","title":"NYSETL.Engines.E1.Message","type":"module"},{"doc":"","ref":"NYSETL.Engines.E1.Message.html#new/1","title":"NYSETL.Engines.E1.Message.new/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Message.html#normalize_phone/1","title":"NYSETL.Engines.E1.Message.normalize_phone/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Message.html#parse/1","title":"NYSETL.Engines.E1.Message.parse/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Message.html#to_date/1","title":"NYSETL.Engines.E1.Message.to_date/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Message.html#to_utc_datetime/1","title":"NYSETL.Engines.E1.Message.to_utc_datetime/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Message.html#transform/2","title":"NYSETL.Engines.E1.Message.transform/2","type":"function"},{"doc":"Given the raw data of a row from an ECLRS file, create a TestResult record.OutcomesChecksum of the row has already been seen. Update the last_seen_file_id for the existing recordChecksum has not been seen. Create a new TestResult with an About.","ref":"NYSETL.Engines.E1.Processor.html","title":"NYSETL.Engines.E1.Processor","type":"module"},{"doc":"","ref":"NYSETL.Engines.E1.Processor.html#find_or_create/1","title":"NYSETL.Engines.E1.Processor.find_or_create/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Processor.html#get_about/2","title":"NYSETL.Engines.E1.Processor.get_about/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Processor.html#process/1","title":"NYSETL.Engines.E1.Processor.process/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html","title":"NYSETL.Engines.E1.SQSListener","type":"module"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#compact_messages_to_most_recent/1","title":"NYSETL.Engines.E1.SQSListener.compact_messages_to_most_recent/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#delete_handles/1","title":"NYSETL.Engines.E1.SQSListener.delete_handles/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#exaws/0","title":"NYSETL.Engines.E1.SQSListener.exaws/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#get_queue_url_from_config/0","title":"NYSETL.Engines.E1.SQSListener.get_queue_url_from_config/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#read_new_message_and_clear_queue/0","title":"NYSETL.Engines.E1.SQSListener.read_new_message_and_clear_queue/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#receive_all_messages/2","title":"NYSETL.Engines.E1.SQSListener.receive_all_messages/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#s3_file/1","title":"NYSETL.Engines.E1.SQSListener.s3_file/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSListener.html#transaction/1","title":"NYSETL.Engines.E1.SQSListener.transaction/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSTask.html","title":"NYSETL.Engines.E1.SQSTask","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.arg is passed as the argument to Task.start_link/1 in the :start field of the spec.For more information, see the Supervisor module, the Supervisor.child_spec/2 function and the Supervisor.child_spec/0 type.","ref":"NYSETL.Engines.E1.SQSTask.html#child_spec/1","title":"NYSETL.Engines.E1.SQSTask.child_spec/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSTask.html#ensure_deleted/1","title":"NYSETL.Engines.E1.SQSTask.ensure_deleted/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSTask.html#import_s3_file/1","title":"NYSETL.Engines.E1.SQSTask.import_s3_file/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSTask.html#loop/0","title":"NYSETL.Engines.E1.SQSTask.loop/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSTask.html#pick_file_location/1","title":"NYSETL.Engines.E1.SQSTask.pick_file_location/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.SQSTask.html#start_link/1","title":"NYSETL.Engines.E1.SQSTask.start_link/1","type":"function"},{"doc":"Used as an Agent-based state machine for processing a single ECLRS file.","ref":"NYSETL.Engines.E1.State.html","title":"NYSETL.Engines.E1.State","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Engines.E1.State.html#child_spec/1","title":"NYSETL.Engines.E1.State.child_spec/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#fini/0","title":"NYSETL.Engines.E1.State.fini/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#finish_reads/1","title":"NYSETL.Engines.E1.State.finish_reads/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#finished?/0","title":"NYSETL.Engines.E1.State.finished?/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#get/0","title":"NYSETL.Engines.E1.State.get/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#new/1","title":"NYSETL.Engines.E1.State.new/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#start_link/1","title":"NYSETL.Engines.E1.State.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#status/0","title":"NYSETL.Engines.E1.State.status/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#update_duplicate_count/1","title":"NYSETL.Engines.E1.State.update_duplicate_count/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#update_error_count/1","title":"NYSETL.Engines.E1.State.update_error_count/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#update_matched_count/1","title":"NYSETL.Engines.E1.State.update_matched_count/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#update_new_count/1","title":"NYSETL.Engines.E1.State.update_new_count/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.State.html#update_processed_count/1","title":"NYSETL.Engines.E1.State.update_processed_count/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Supervisor.html","title":"NYSETL.Engines.E1.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Engines.E1.Supervisor.html#child_spec/1","title":"NYSETL.Engines.E1.Supervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for Supervisor.init/1.","ref":"NYSETL.Engines.E1.Supervisor.html#init/1","title":"NYSETL.Engines.E1.Supervisor.init/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Supervisor.html#start_link/1","title":"NYSETL.Engines.E1.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E1.Supervisor.html#stop/0","title":"NYSETL.Engines.E1.Supervisor.stop/0","type":"function"},{"doc":"For a TestResult record, decide the followingFind or create a Person record, based on :patient_key or unique (dob/last_name/first_name)Create or update one more IndexCase records for this countyCreate or update a LabResult record for the IndexCaseEdge casesPre-existing data in CommCare may not be well deduplicated for people. If we have deduped a person, but there are multiple IndexCase records for that person in this county, creation of new LabResult records is duplicated across all IndexCase records.","ref":"NYSETL.Engines.E2.Processor.html","title":"NYSETL.Engines.E2.Processor","type":"module"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#compact_join/2","title":"NYSETL.Engines.E2.Processor.compact_join/2","type":"function"},{"doc":"Returns a tuple where the first element is a map of additions and the second element is a map of updated values.Examplesiex&gt; a = %{a: 1, b: 2, z: 26} iex&gt; b = %{a: 1, b: 3, y: 25} iex&gt; diff(a, b) {%{y: 25}, %{b: 3}}","ref":"NYSETL.Engines.E2.Processor.html#diff/3","title":"NYSETL.Engines.E2.Processor.diff/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#initials/2","title":"NYSETL.Engines.E2.Processor.initials/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#lab_result_text/1","title":"NYSETL.Engines.E2.Processor.lab_result_text/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#process/2","title":"NYSETL.Engines.E2.Processor.process/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#repeat_type/2","title":"NYSETL.Engines.E2.Processor.repeat_type/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#to_index_case_data/4","title":"NYSETL.Engines.E2.Processor.to_index_case_data/4","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#to_index_case_data_address_block/1","title":"NYSETL.Engines.E2.Processor.to_index_case_data_address_block/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#to_index_case_data_county_block/1","title":"NYSETL.Engines.E2.Processor.to_index_case_data_county_block/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#to_index_case_data_person_block/2","title":"NYSETL.Engines.E2.Processor.to_index_case_data_person_block/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#to_index_case_data_rest/1","title":"NYSETL.Engines.E2.Processor.to_index_case_data_rest/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#to_lab_result_data/3","title":"NYSETL.Engines.E2.Processor.to_lab_result_data/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.Processor.html#with_index_case_data_complete_fields/1","title":"NYSETL.Engines.E2.Processor.with_index_case_data_complete_fields/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.TestResultProcessor.html","title":"NYSETL.Engines.E2.TestResultProcessor","type":"module"},{"doc":"","ref":"NYSETL.Engines.E2.TestResultProducer.html","title":"NYSETL.Engines.E2.TestResultProducer","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Engines.E2.TestResultProducer.html#child_spec/1","title":"NYSETL.Engines.E2.TestResultProducer.child_spec/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.TestResultProducer.html#last_enqueued_test_result_id/0","title":"NYSETL.Engines.E2.TestResultProducer.last_enqueued_test_result_id/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E2.TestResultProducer.html#start_link/1","title":"NYSETL.Engines.E2.TestResultProducer.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Broadway.html","title":"NYSETL.Engines.E3.Broadway","type":"module"},{"doc":"","ref":"NYSETL.Engines.E3.Broadway.html#ack/3","title":"NYSETL.Engines.E3.Broadway.ack/3","type":"function"},{"doc":"Callback implementation for Broadway.handle_message/3.","ref":"NYSETL.Engines.E3.Broadway.html#handle_message/3","title":"NYSETL.Engines.E3.Broadway.handle_message/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Broadway.html#start_link/1","title":"NYSETL.Engines.E3.Broadway.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Broadway.html#transform/2","title":"NYSETL.Engines.E3.Broadway.transform/2","type":"function"},{"doc":"It is not entirely clear that this module is useful and necessary.","ref":"NYSETL.Engines.E3.Commcare.html","title":"NYSETL.Engines.E3.Commcare","type":"module"},{"doc":"","ref":"NYSETL.Engines.E3.Commcare.html#start_link/0","title":"NYSETL.Engines.E3.Commcare.start_link/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Commcare.html#stop/0","title":"NYSETL.Engines.E3.Commcare.stop/0","type":"function"},{"doc":"Find IndexCase records to process by the CommcareCaseLoader and created or updated in CommCare.","ref":"NYSETL.Engines.E3.IndexCaseProducer.html","title":"NYSETL.Engines.E3.IndexCaseProducer","type":"module"},{"doc":"Callback implementation for GenStage.handle_demand/2.","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#handle_demand/2","title":"NYSETL.Engines.E3.IndexCaseProducer.handle_demand/2","type":"function"},{"doc":"Callback implementation for GenStage.handle_info/2.","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#handle_info/2","title":"NYSETL.Engines.E3.IndexCaseProducer.handle_info/2","type":"function"},{"doc":"Callback implementation for GenStage.init/1.","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#init/1","title":"NYSETL.Engines.E3.IndexCaseProducer.init/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#more_recent_than/2","title":"NYSETL.Engines.E3.IndexCaseProducer.more_recent_than/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#new/1","title":"NYSETL.Engines.E3.IndexCaseProducer.new/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#start_link/1","title":"NYSETL.Engines.E3.IndexCaseProducer.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.IndexCaseProducer.html#unprocessed_index_cases/3","title":"NYSETL.Engines.E3.IndexCaseProducer.unprocessed_index_cases/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Supervisor.html","title":"NYSETL.Engines.E3.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Engines.E3.Supervisor.html#child_spec/1","title":"NYSETL.Engines.E3.Supervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for Supervisor.init/1.","ref":"NYSETL.Engines.E3.Supervisor.html#init/1","title":"NYSETL.Engines.E3.Supervisor.init/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Supervisor.html#start_link/1","title":"NYSETL.Engines.E3.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E3.Supervisor.html#stop/0","title":"NYSETL.Engines.E3.Supervisor.stop/0","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseIdentifier.html","title":"NYSETL.Engines.E4.CaseIdentifier","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.CaseIdentifier.html#describe/1","title":"NYSETL.Engines.E4.CaseIdentifier.describe/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseIdentifier.html#for_case_id/1","title":"NYSETL.Engines.E4.CaseIdentifier.for_case_id/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseIdentifier.html#new/1","title":"NYSETL.Engines.E4.CaseIdentifier.new/1","type":"function"},{"doc":"Uses Commcare.Api to understand transfer chains and creates index case records to reflect the data in CommCare.","ref":"NYSETL.Engines.E4.CaseTransferChain.html","title":"NYSETL.Engines.E4.CaseTransferChain","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#contains_county_domain?/2","title":"NYSETL.Engines.E4.CaseTransferChain.contains_county_domain?/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#describe/1","title":"NYSETL.Engines.E4.CaseTransferChain.describe/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#fetch_case/1","title":"NYSETL.Engines.E4.CaseTransferChain.fetch_case/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#follow_transfers/3","title":"NYSETL.Engines.E4.CaseTransferChain.follow_transfers/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#get_patient_case_data/2","title":"NYSETL.Engines.E4.CaseTransferChain.get_patient_case_data/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#get_transfer_destination_cases/1","title":"NYSETL.Engines.E4.CaseTransferChain.get_transfer_destination_cases/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#get_transfer_destination_county/3","title":"NYSETL.Engines.E4.CaseTransferChain.get_transfer_destination_county/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#resolve/1","title":"NYSETL.Engines.E4.CaseTransferChain.resolve/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CaseTransferChain.html#try_transfer_source_case_id_match/2","title":"NYSETL.Engines.E4.CaseTransferChain.try_transfer_source_case_id_match/2","type":"function"},{"doc":"Runs in Oban to put data about an IndexCase record into CommCare.","ref":"NYSETL.Engines.E4.CommcareCaseLoader.html","title":"NYSETL.Engines.E4.CommcareCaseLoader","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.CommcareCaseLoader.html#perform1/1","title":"NYSETL.Engines.E4.CommcareCaseLoader.perform1/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.CommcareCaseLoader.html#perform2/2","title":"NYSETL.Engines.E4.CommcareCaseLoader.perform2/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.Data.html","title":"NYSETL.Engines.E4.Data","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.Data.html#from_index_case/3","title":"NYSETL.Engines.E4.Data.from_index_case/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.Data.html#new_lab_result_received_date/2","title":"NYSETL.Engines.E4.Data.new_lab_result_received_date/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.Diff.html","title":"NYSETL.Engines.E4.Diff","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.Diff.html#case_diff_summary/2","title":"NYSETL.Engines.E4.Diff.case_diff_summary/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.PatientCaseData.html","title":"NYSETL.Engines.E4.PatientCaseData","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.PatientCaseData.html#new/2","title":"NYSETL.Engines.E4.PatientCaseData.new/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.Transfer.html","title":"NYSETL.Engines.E4.Transfer","type":"module"},{"doc":"Looks for an existing index case for the provided case_id and county_id, and returns it if found.Otherwise, creates a new index case and lab results that mirror an index case and lab results that have been transferred in commcare.The data field of the new index case is the result of merging the data field from the old index case plus the data from the newly-transferred case in commcare.The data fields of the lab results belonging to the new index case ONLY get data from the old lab results, not from the newly-transferred lab results in commcare, because the current thinking is that ECLRS data is more correct for lab results.","ref":"NYSETL.Engines.E4.Transfer.html#find_or_create_transferred_index_case_and_lab_results/3","title":"NYSETL.Engines.E4.Transfer.find_or_create_transferred_index_case_and_lab_results/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E4.XmlBuilder.html","title":"NYSETL.Engines.E4.XmlBuilder","type":"module"},{"doc":"","ref":"NYSETL.Engines.E4.XmlBuilder.html#build/1","title":"NYSETL.Engines.E4.XmlBuilder.build/1","type":"function"},{"doc":"Fetches newly updated patient_cases from all counties in CommCare, and updates or creates IndexCases as needed.","ref":"NYSETL.Engines.E5.Broadway.html","title":"NYSETL.Engines.E5.Broadway","type":"module"},{"doc":"","ref":"NYSETL.Engines.E5.Broadway.html#ack/3","title":"NYSETL.Engines.E5.Broadway.ack/3","type":"function"},{"doc":"Callback implementation for Broadway.handle_failed/2.","ref":"NYSETL.Engines.E5.Broadway.html#handle_failed/2","title":"NYSETL.Engines.E5.Broadway.handle_failed/2","type":"function"},{"doc":"Callback implementation for Broadway.handle_message/3.","ref":"NYSETL.Engines.E5.Broadway.html#handle_message/3","title":"NYSETL.Engines.E5.Broadway.handle_message/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Broadway.html#start_link/1","title":"NYSETL.Engines.E5.Broadway.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Broadway.html#transform/2","title":"NYSETL.Engines.E5.Broadway.transform/2","type":"function"},{"doc":"Run for each patient case extracted from CommCare.case_id already present in our DB:update it with changes from CommCare (but ignore any new lab results)case_id does not exist, Person exists and can be matched by dob | last_name | first_name:create an IndexCase and LabResult record(s)case_id does not exist, Person cannot be matched:create a Person, IndexCase and LabResult record(s)","ref":"NYSETL.Engines.E5.Processor.html","title":"NYSETL.Engines.E5.Processor","type":"module"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#case_has_lab_result?/1","title":"NYSETL.Engines.E5.Processor.case_has_lab_result?/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#case_is_a_lab_result?/1","title":"NYSETL.Engines.E5.Processor.case_is_a_lab_result?/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#case_is_a_stub?/1","title":"NYSETL.Engines.E5.Processor.case_is_a_stub?/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#create_index_case/3","title":"NYSETL.Engines.E5.Processor.create_index_case/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#create_lab_results/3","title":"NYSETL.Engines.E5.Processor.create_lab_results/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#create_person/1","title":"NYSETL.Engines.E5.Processor.create_person/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#extract_case_data/1","title":"NYSETL.Engines.E5.Processor.extract_case_data/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#find_and_update_index_case/2","title":"NYSETL.Engines.E5.Processor.find_and_update_index_case/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#find_patient_key/2","title":"NYSETL.Engines.E5.Processor.find_patient_key/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#find_person/1","title":"NYSETL.Engines.E5.Processor.find_person/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#find_person/2","title":"NYSETL.Engines.E5.Processor.find_person/2","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#find_person/3","title":"NYSETL.Engines.E5.Processor.find_person/3","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#parse_dob/1","title":"NYSETL.Engines.E5.Processor.parse_dob/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#patient_key_from_external_id/1","title":"NYSETL.Engines.E5.Processor.patient_key_from_external_id/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#patient_key_from_lab_result/1","title":"NYSETL.Engines.E5.Processor.patient_key_from_lab_result/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#patient_key_from_name_and_id/1","title":"NYSETL.Engines.E5.Processor.patient_key_from_name_and_id/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Processor.html#process/1","title":"NYSETL.Engines.E5.Processor.process/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Producer.html","title":"NYSETL.Engines.E5.Producer","type":"module"},{"doc":"handle_demand/2 is called when the Broadway dispatcher sees that consumers are free to receive more messages.This module iterates through counties in the current_county_list until it runs out of counties, at which point it goes to sleep. After being asleep idle_timeout_ms, the :poll timer will wake this producer up, at which point it will start over from the top of the county list.Special cases in the function heads below:backlog has message count greater than demand : A previous API request has put CommCare cases into a backlog, and we can drain the backlog without making another API request.is_nil(last_offset) : The last API request for the current county is the last page of records that have been updated recently. Move on to the next county.Error handling:If an error is observed when making a CommCare API request, recurse into the is_nil(last_offset) special case so that we immediately move on to the next county.","ref":"NYSETL.Engines.E5.Producer.html#handle_demand/2","title":"NYSETL.Engines.E5.Producer.handle_demand/2","type":"function"},{"doc":"Callback implementation for GenStage.handle_info/2.","ref":"NYSETL.Engines.E5.Producer.html#handle_info/2","title":"NYSETL.Engines.E5.Producer.handle_info/2","type":"function"},{"doc":"Callback implementation for GenStage.init/1.","ref":"NYSETL.Engines.E5.Producer.html#init/1","title":"NYSETL.Engines.E5.Producer.init/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Producer.html#new/1","title":"NYSETL.Engines.E5.Producer.new/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Supervisor.html","title":"NYSETL.Engines.E5.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Engines.E5.Supervisor.html#child_spec/1","title":"NYSETL.Engines.E5.Supervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for Supervisor.init/1.","ref":"NYSETL.Engines.E5.Supervisor.html#init/1","title":"NYSETL.Engines.E5.Supervisor.init/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Supervisor.html#start_link/1","title":"NYSETL.Engines.E5.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Engines.E5.Supervisor.html#stop/0","title":"NYSETL.Engines.E5.Supervisor.stop/0","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html","title":"NYSETL.Extra.ForDimagi","type":"module"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#get_cases/1","title":"NYSETL.Extra.ForDimagi.get_cases/1","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#get_eclrs_maps/2","title":"NYSETL.Extra.ForDimagi.get_eclrs_maps/2","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#inline/1","title":"NYSETL.Extra.ForDimagi.inline/1","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#merge/2","title":"NYSETL.Extra.ForDimagi.merge/2","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#one_file_for_all/3","title":"NYSETL.Extra.ForDimagi.one_file_for_all/3","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#one_file_for_each/3","title":"NYSETL.Extra.ForDimagi.one_file_for_each/3","type":"function"},{"doc":"","ref":"NYSETL.Extra.ForDimagi.html#recent_from_server/2","title":"NYSETL.Extra.ForDimagi.recent_from_server/2","type":"function"},{"doc":"Extra shared functions for interacting with Map data structures.","ref":"NYSETL.Extra.Map.html","title":"NYSETL.Extra.Map","type":"module"},{"doc":"Merge map b into map a, where only values in map a that are not nil or empty take precedence over values from map b.Examplesiex&gt; import NYSETL.Extra.Map iex&gt; %{a: 1} |&gt; merge_empty_fields(%{a: 2}) %{a: 1} iex&gt; %{a: 1} |&gt; merge_empty_fields(%{b: 2}) %{a: 1, b: 2} iex&gt; %{a: 1, b: nil} |&gt; merge_empty_fields(%{b: 2}) %{a: 1, b: 2} iex&gt; %{a: 1, b: &quot;&quot;} |&gt; merge_empty_fields(%{b: 2}) %{a: 1, b: 2}","ref":"NYSETL.Extra.Map.html#merge_empty_fields/2","title":"NYSETL.Extra.Map.merge_empty_fields/2","type":"function"},{"doc":"Reusable regular expressions that can be used to match on specific types of values.","ref":"NYSETL.Extra.Regex.html","title":"NYSETL.Extra.Regex","type":"module"},{"doc":"A regular expression for matching on UUIDs.Examplesiex&gt; &quot;abcdef&quot; =~ NYSETL.Extra.Regex.uuid() false iex&gt; &quot;4d47af88-4ff0-48f0-831e-50cf23bc9fd2&quot; =~ NYSETL.Extra.Regex.uuid() true","ref":"NYSETL.Extra.Regex.html#uuid/0","title":"NYSETL.Extra.Regex.uuid/0","type":"function"},{"doc":"Functions to scrub all PII in ECLRS dump files so that it can be used in development. Sensitive data is replaced with random strings of the same length and format (letters for letters, digits for digits and dates for dates). Currently only works with the 45-column ECLRS files but can easily be extended.To use, runalias NYSETL.Extra.Scrubber Scrubber.scrub_file(&quot;../eclrs/data/c201012_0932.txt&quot;, &quot;./scrubbed.txt&quot;)Some internal functions have been left public for your pleasure.","ref":"NYSETL.Extra.Scrubber.html","title":"NYSETL.Extra.Scrubber","type":"module"},{"doc":"","ref":"NYSETL.Extra.Scrubber.html#random_date/1","title":"NYSETL.Extra.Scrubber.random_date/1","type":"function"},{"doc":"Return a string which is based on the input string but with all letters replaced with random uppercase letters and all digits replaced with random digits. Uses ETS to always return the same output for a certain input.Examplesiex&gt; import NYSETL.Extra.Scrubber iex&gt; ets = :ets.new(:scrubber, [:public]) iex&gt; :rand.seed(:exsss, {101, 102, 103}) iex&gt; scrub_and_remember(&quot;john doe&quot;, ets) &quot;XTKK RDF&quot; iex&gt; scrub_and_remember(&quot;mary-ann doe&quot;, ets) &quot;EWZB-YLL ZCH&quot; iex&gt; scrub_and_remember(&quot;john doe&quot;, ets) &quot;XTKK RDF&quot;","ref":"NYSETL.Extra.Scrubber.html#scrub_and_remember/2","title":"NYSETL.Extra.Scrubber.scrub_and_remember/2","type":"function"},{"doc":"Make a copy of the input file with all sensitive data replaced with random data of the same type and length.Uses ETS to make sure that a given source string is consistently replaced with the same scrubbed string. The caller can supply an existing ETS for testing purposes or similar.Scrubber.scrub_file(&quot;../eclrs/data/c201012_0932.txt&quot;, &quot;./scrubbed.txt&quot;)","ref":"NYSETL.Extra.Scrubber.html#scrub_file/3","title":"NYSETL.Extra.Scrubber.scrub_file/3","type":"function"},{"doc":"Scrubs a string if its field index requires scrubbing the specified column layout.Examplesiex&gt; import NYSETL.Extra.Scrubber iex&gt; ets = :ets.new(:scrubber, [:public]) iex&gt; :rand.seed(:exsss, {101, 102, 103}) iex&gt; scrub_if_index_should_be_scrubbed(:v1, {&quot;Doe&quot;, 0}, ets) &quot;XTK&quot; iex&gt; scrub_if_index_should_be_scrubbed(:v1, {&quot;59483&quot;, 8}, ets) # ZIP is not PII &quot;59483&quot;","ref":"NYSETL.Extra.Scrubber.html#scrub_if_index_should_be_scrubbed/3","title":"NYSETL.Extra.Scrubber.scrub_if_index_should_be_scrubbed/3","type":"function"},{"doc":"Return a string which is based on the input string but with all letters replaced with random uppercase letters and all digits replaced with random digits. Replaces valid ISO dates with valid ISO dates.Examplesiex&gt; import NYSETL.Extra.Scrubber iex&gt; :rand.seed(:exsss, {101, 102, 103}) iex&gt; scrub_random(&quot;john doe&quot;) &quot;XTKK RDF&quot; iex&gt; scrub_random(&quot;john doe&quot;) # no memory &quot;EWZB YLL&quot; iex&gt; scrub_random(&quot;123 West 27th St.&quot;) &quot;432 ZCHT 39OA QS.&quot; iex&gt; scrub_random(&quot;23MAY1965&quot;) # special handling of dates &quot;17FEB1945&quot; iex&gt; scrub_random(&quot;23MAY1965:00:00:00.000000&quot;) # special handling of datetimes &quot;29NOV1994:00:00:00.000000&quot;","ref":"NYSETL.Extra.Scrubber.html#scrub_random/1","title":"NYSETL.Extra.Scrubber.scrub_random/1","type":"function"},{"doc":"Scrub all PII fields in one row.Examplesiex&gt; import NYSETL.Extra.Scrubber iex&gt; ets = :ets.new(:scrubber, [:public]) iex&gt; :rand.seed(:exsss, {101, 102, 103}) iex&gt; scrub_row({:v1, &quot;Doe|J|John|18MAR1965:00:00:00|||||||||||||||||||||||||||||||||||||||||unclear\\n&quot;}, ets) &quot;XTK|K|RDFE|28AUG2018:00:00:00|||||||||||||||||||||||||||||||||||||||||unclear\\n&quot; iex&gt; scrub_row({:v1, &quot;Doe|A|Mary|23MAY1965:00:00:00.000000|||||||||||||||||||||||||||||||||||||||||POS&quot;}, ets) &quot;XTK|Z|BYLL|18APR2016:00:00:00.000000|||||||||||||||||||||||||||||||||||||||||POS&quot;","ref":"NYSETL.Extra.Scrubber.html#scrub_row/2","title":"NYSETL.Extra.Scrubber.scrub_row/2","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Oban.ErrorReporter.html","title":"NYSETL.Monitoring.Oban.ErrorReporter","type":"module"},{"doc":"","ref":"NYSETL.Monitoring.Oban.ErrorReporter.html#group_noisy_messages/2","title":"NYSETL.Monitoring.Oban.ErrorReporter.group_noisy_messages/2","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Oban.ErrorReporter.html#handle_event/4","title":"NYSETL.Monitoring.Oban.ErrorReporter.handle_event/4","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Oban.ErrorReporter.html#post_to_sentry/3","title":"NYSETL.Monitoring.Oban.ErrorReporter.post_to_sentry/3","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Supervisor.html","title":"NYSETL.Monitoring.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETL.Monitoring.Supervisor.html#child_spec/1","title":"NYSETL.Monitoring.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Supervisor.html#metrics/0","title":"NYSETL.Monitoring.Supervisor.metrics/0","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Supervisor.html#start_link/1","title":"NYSETL.Monitoring.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"NYSETL.Monitoring.Transformer.FailureReporter.html","title":"NYSETL.Monitoring.Transformer.FailureReporter","type":"module"},{"doc":"","ref":"NYSETL.Monitoring.Transformer.FailureReporter.html#count_processing_failed/0","title":"NYSETL.Monitoring.Transformer.FailureReporter.count_processing_failed/0","type":"function"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.html","title":"NYSETL.Tasks.BackfillPapertrailVersions","type":"module"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.html#backfill_model/3","title":"NYSETL.Tasks.BackfillPapertrailVersions.backfill_model/3","type":"function"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.html#run/0","title":"NYSETL.Tasks.BackfillPapertrailVersions.run/0","type":"function"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.html","title":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas","type":"module"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.IndexCase.html","title":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.IndexCase","type":"module"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.LabResult.html","title":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.LabResult","type":"module"},{"doc":"","ref":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.Person.html","title":"NYSETL.Tasks.BackfillPapertrailVersions.MigrationSchemas.Person","type":"module"},{"doc":"","ref":"NYSETLWeb.Endpoint.html","title":"NYSETLWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3.","ref":"NYSETLWeb.Endpoint.html#broadcast/3","title":"NYSETLWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3.","ref":"NYSETLWeb.Endpoint.html#broadcast!/3","title":"NYSETLWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4.","ref":"NYSETLWeb.Endpoint.html#broadcast_from/4","title":"NYSETLWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4.","ref":"NYSETLWeb.Endpoint.html#broadcast_from!/4","title":"NYSETLWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2.","ref":"NYSETLWeb.Endpoint.html#call/2","title":"NYSETLWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"NYSETLWeb.Endpoint.html#child_spec/1","title":"NYSETLWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for keyReturns default if the key does not exist.","ref":"NYSETLWeb.Endpoint.html#config/2","title":"NYSETLWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"NYSETLWeb.Endpoint.html#config_change/2","title":"NYSETLWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"NYSETLWeb.Endpoint.html#host/0","title":"NYSETLWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"NYSETLWeb.Endpoint.html#init/1","title":"NYSETLWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3.","ref":"NYSETLWeb.Endpoint.html#local_broadcast/3","title":"NYSETLWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4.","ref":"NYSETLWeb.Endpoint.html#local_broadcast_from/4","title":"NYSETLWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"NYSETLWeb.Endpoint.html#path/1","title":"NYSETLWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"NYSETLWeb.Endpoint.html#script_name/0","title":"NYSETLWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree.","ref":"NYSETLWeb.Endpoint.html#start_link/1","title":"NYSETLWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static. Meant to be used for Subresource Integrity with CDNs.","ref":"NYSETLWeb.Endpoint.html#static_integrity/1","title":"NYSETLWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity.","ref":"NYSETLWeb.Endpoint.html#static_lookup/1","title":"NYSETLWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static.","ref":"NYSETLWeb.Endpoint.html#static_path/1","title":"NYSETLWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information.It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"NYSETLWeb.Endpoint.html#static_url/0","title":"NYSETLWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct.It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"NYSETLWeb.Endpoint.html#struct_url/0","title":"NYSETLWeb.Endpoint.struct_url/0","type":"function"},{"doc":"","ref":"NYSETLWeb.Endpoint.html#subscribe/2","title":"NYSETLWeb.Endpoint.subscribe/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Endpoint.html#unsubscribe/1","title":"NYSETLWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information.It uses the configuration under :url to generate such.","ref":"NYSETLWeb.Endpoint.html#url/0","title":"NYSETLWeb.Endpoint.url/0","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"NYSETLWeb.ErrorHelpers.html","title":"NYSETLWeb.ErrorHelpers","type":"module"},{"doc":"Generates tag for inlined form input errors.","ref":"NYSETLWeb.ErrorHelpers.html#error_tag/2","title":"NYSETLWeb.ErrorHelpers.error_tag/2","type":"function"},{"doc":"Translates an error message using gettext.","ref":"NYSETLWeb.ErrorHelpers.html#translate_error/1","title":"NYSETLWeb.ErrorHelpers.translate_error/1","type":"function"},{"doc":"","ref":"NYSETLWeb.ErrorView.html","title":"NYSETLWeb.ErrorView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"NYSETLWeb.ErrorView.html#__resource__/0","title":"NYSETLWeb.ErrorView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"NYSETLWeb.ErrorView.html#render/2","title":"NYSETLWeb.ErrorView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"NYSETLWeb.ErrorView.html#template_not_found/2","title":"NYSETLWeb.ErrorView.template_not_found/2","type":"function"},{"doc":"A module providing Internationalization with a gettext-based API.By using Gettext, your module gains a set of macros for translations, for example:import NYSETLWeb.Gettext # Simple translation gettext(&quot;Here is the string to translate&quot;) # Plural translation ngettext(&quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3) # Domain-based translation dgettext(&quot;errors&quot;, &quot;Here is the error message to translate&quot;)See the Gettext Docs for detailed usage.","ref":"NYSETLWeb.Gettext.html","title":"NYSETLWeb.Gettext","type":"module"},{"doc":"Callback implementation for Gettext.Backend.dgettext/3.","ref":"NYSETLWeb.Gettext.html#dgettext/3","title":"NYSETLWeb.Gettext.dgettext/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dgettext_noop/2.","ref":"NYSETLWeb.Gettext.html#dgettext_noop/2","title":"NYSETLWeb.Gettext.dgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext/5.","ref":"NYSETLWeb.Gettext.html#dngettext/5","title":"NYSETLWeb.Gettext.dngettext/5","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext_noop/3.","ref":"NYSETLWeb.Gettext.html#dngettext_noop/3","title":"NYSETLWeb.Gettext.dngettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpgettext/4.","ref":"NYSETLWeb.Gettext.html#dpgettext/4","title":"NYSETLWeb.Gettext.dpgettext/4","type":"macro"},{"doc":"","ref":"NYSETLWeb.Gettext.html#dpgettext_noop/3","title":"NYSETLWeb.Gettext.dpgettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpngettext/6.","ref":"NYSETLWeb.Gettext.html#dpngettext/6","title":"NYSETLWeb.Gettext.dpngettext/6","type":"macro"},{"doc":"","ref":"NYSETLWeb.Gettext.html#dpngettext_noop/4","title":"NYSETLWeb.Gettext.dpngettext_noop/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext/2.","ref":"NYSETLWeb.Gettext.html#gettext/2","title":"NYSETLWeb.Gettext.gettext/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_comment/1.","ref":"NYSETLWeb.Gettext.html#gettext_comment/1","title":"NYSETLWeb.Gettext.gettext_comment/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_noop/1.","ref":"NYSETLWeb.Gettext.html#gettext_noop/1","title":"NYSETLWeb.Gettext.gettext_noop/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2.","ref":"NYSETLWeb.Gettext.html#handle_missing_bindings/2","title":"NYSETLWeb.Gettext.handle_missing_bindings/2","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_plural_translation/6.","ref":"NYSETLWeb.Gettext.html#handle_missing_plural_translation/6","title":"NYSETLWeb.Gettext.handle_missing_plural_translation/6","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_translation/4.","ref":"NYSETLWeb.Gettext.html#handle_missing_translation/4","title":"NYSETLWeb.Gettext.handle_missing_translation/4","type":"function"},{"doc":"","ref":"NYSETLWeb.Gettext.html#lgettext/5","title":"NYSETLWeb.Gettext.lgettext/5","type":"function"},{"doc":"","ref":"NYSETLWeb.Gettext.html#lngettext/7","title":"NYSETLWeb.Gettext.lngettext/7","type":"function"},{"doc":"Callback implementation for Gettext.Backend.ngettext/4.","ref":"NYSETLWeb.Gettext.html#ngettext/4","title":"NYSETLWeb.Gettext.ngettext/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.ngettext_noop/2.","ref":"NYSETLWeb.Gettext.html#ngettext_noop/2","title":"NYSETLWeb.Gettext.ngettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pgettext/3.","ref":"NYSETLWeb.Gettext.html#pgettext/3","title":"NYSETLWeb.Gettext.pgettext/3","type":"macro"},{"doc":"","ref":"NYSETLWeb.Gettext.html#pgettext_noop/2","title":"NYSETLWeb.Gettext.pgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pngettext/5.","ref":"NYSETLWeb.Gettext.html#pngettext/5","title":"NYSETLWeb.Gettext.pngettext/5","type":"macro"},{"doc":"","ref":"NYSETLWeb.Gettext.html#pngettext_noop/3","title":"NYSETLWeb.Gettext.pngettext_noop/3","type":"macro"},{"doc":"","ref":"NYSETLWeb.HealthCheckController.html","title":"NYSETLWeb.HealthCheckController","type":"module"},{"doc":"","ref":"NYSETLWeb.HealthCheckController.html#index/2","title":"NYSETLWeb.HealthCheckController.index/2","type":"function"},{"doc":"","ref":"NYSETLWeb.LayoutView.html","title":"NYSETLWeb.LayoutView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"NYSETLWeb.LayoutView.html#__resource__/0","title":"NYSETLWeb.LayoutView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"NYSETLWeb.LayoutView.html#render/2","title":"NYSETLWeb.LayoutView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"NYSETLWeb.LayoutView.html#template_not_found/2","title":"NYSETLWeb.LayoutView.template_not_found/2","type":"function"},{"doc":"","ref":"NYSETLWeb.PageLive.html","title":"NYSETLWeb.PageLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1.","ref":"NYSETLWeb.PageLive.html#render/1","title":"NYSETLWeb.PageLive.render/1","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.html","title":"NYSETLWeb.Router","type":"module"},{"doc":"","ref":"NYSETLWeb.Router.html#api/2","title":"NYSETLWeb.Router.api/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.html#browser/2","title":"NYSETLWeb.Router.browser/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"NYSETLWeb.Router.html#call/2","title":"NYSETLWeb.Router.call/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.html#dashboard_basic_auth/2","title":"NYSETLWeb.Router.dashboard_basic_auth/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"NYSETLWeb.Router.html#init/1","title":"NYSETLWeb.Router.init/1","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.html#protected/2","title":"NYSETLWeb.Router.protected/2","type":"function"},{"doc":"Module with named helpers generated from NYSETLWeb.Router.","ref":"NYSETLWeb.Router.Helpers.html","title":"NYSETLWeb.Router.Helpers","type":"module"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#health_check_path/2","title":"NYSETLWeb.Router.Helpers.health_check_path/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#health_check_path/3","title":"NYSETLWeb.Router.Helpers.health_check_path/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#health_check_url/2","title":"NYSETLWeb.Router.Helpers.health_check_url/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#health_check_url/3","title":"NYSETLWeb.Router.Helpers.health_check_url/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_path/2","title":"NYSETLWeb.Router.Helpers.live_dashboard_path/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_path/3","title":"NYSETLWeb.Router.Helpers.live_dashboard_path/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_path/4","title":"NYSETLWeb.Router.Helpers.live_dashboard_path/4","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_path/5","title":"NYSETLWeb.Router.Helpers.live_dashboard_path/5","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_url/2","title":"NYSETLWeb.Router.Helpers.live_dashboard_url/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_url/3","title":"NYSETLWeb.Router.Helpers.live_dashboard_url/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_url/4","title":"NYSETLWeb.Router.Helpers.live_dashboard_url/4","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#live_dashboard_url/5","title":"NYSETLWeb.Router.Helpers.live_dashboard_url/5","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#oban_dashboard_path/2","title":"NYSETLWeb.Router.Helpers.oban_dashboard_path/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#oban_dashboard_path/3","title":"NYSETLWeb.Router.Helpers.oban_dashboard_path/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#oban_dashboard_url/2","title":"NYSETLWeb.Router.Helpers.oban_dashboard_url/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#oban_dashboard_url/3","title":"NYSETLWeb.Router.Helpers.oban_dashboard_url/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#page_path/2","title":"NYSETLWeb.Router.Helpers.page_path/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#page_path/3","title":"NYSETLWeb.Router.Helpers.page_path/3","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#page_url/2","title":"NYSETLWeb.Router.Helpers.page_url/2","type":"function"},{"doc":"","ref":"NYSETLWeb.Router.Helpers.html#page_url/3","title":"NYSETLWeb.Router.Helpers.page_url/3","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"NYSETLWeb.Router.Helpers.html#path/2","title":"NYSETLWeb.Router.Helpers.path/2","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"NYSETLWeb.Router.Helpers.html#static_integrity/2","title":"NYSETLWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"NYSETLWeb.Router.Helpers.html#static_path/2","title":"NYSETLWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"NYSETLWeb.Router.Helpers.html#static_url/2","title":"NYSETLWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"NYSETLWeb.Router.Helpers.html#url/1","title":"NYSETLWeb.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"NYSETLWeb.Telemetry.html","title":"NYSETLWeb.Telemetry","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"NYSETLWeb.Telemetry.html#child_spec/1","title":"NYSETLWeb.Telemetry.child_spec/1","type":"function"},{"doc":"","ref":"NYSETLWeb.Telemetry.html#metrics/0","title":"NYSETLWeb.Telemetry.metrics/0","type":"function"},{"doc":"","ref":"NYSETLWeb.Telemetry.html#start_link/1","title":"NYSETLWeb.Telemetry.start_link/1","type":"function"},{"doc":"","ref":"NYSETLWeb.UserSocket.html","title":"NYSETLWeb.UserSocket","type":"module"},{"doc":"","ref":"NYSETL.ECLRS.File.HeaderError.html","title":"NYSETL.ECLRS.File.HeaderError","type":"exception"},{"doc":"","ref":"NYSETL.Engines.E1.Message.HeaderError.html","title":"NYSETL.Engines.E1.Message.HeaderError","type":"exception"},{"doc":"OverviewThis application is responsible for moving data from the New York State Department of Health's (NYSDOH) lab result reporting system (ECLRS) and CommCare, the case management system used by NYS for contact tracing.","ref":"overview.html","title":"Overview","type":"extras"},{"doc":"Viaduct EnginesViaduct is built for speed and asynchronous processing with clear separations of responsibilities. The code can be divided into 5 engines that each perform their own work independent of the others. The engines areEngine 1: The ECLRS extractor that takes the ECLRS export files from S3, weeds out the lines Viaduct has seen before, and inserts all new lines into the database.Engine 2: The ECLRS-&gt;CommCare Transformer that discovers as-yet unprocessed lines from ECLRS, finds or creates a &quot;person&quot; (Viaduct's own, internal concept) and then creates or updates the records that will later be sent to CommCare: an &quot;index case&quot; and a &quot;lab result&quot;.Engine 3: The CommCare Enqueuer that discovers index cases that haven't been synched to CommCare since their last change, and puts them on the Oban queue for controlled processing.Engine 4: The CommCare Case Loader that takes one index case at a time and posts it and its lab results to CommCare after figuring out which county's project space it belongs to - either the one that ECLRS said, or one to which it has been transferred within CommCare.Engine 5: The CommCare Extractor which runs constantly, synching down new and updated information about patients that we recognize.The &quot;independent&quot; aspect bears elaborating: Rather than one engine passing work to the next one in the conceptual pipeline, each engine looks for data (in the database, etc) that is ready to be processed by that engine. Thus, the API between the engines is not a callable API, but data at rest in a certain format.In the following sections we are going to look at each of the engines in more detail. The code for each engine can be found in lib/nys_etl/engines/e1 for engine 1, etc.","ref":"engines.html","title":"Viaduct Engines","type":"extras"},{"doc":"NYSETL.Engines.E1.*: A Broadway pipeline started on demand by a Task that listens for SQS notifications.The NYS DOH delivers a 14-day export of positive Covid-19 test results to an Amazon S3 bucket roughly every 30 minutes. S3 notifies Viaduct (via Amazon SNS and Amazon SQS) when a new file is received. This notification is received by NYSETL.Engines.E1.SQSListener in collaboration with NYSETL.Engines.E1.SQSTask, which then kick off NYSETL.Engines.E1.ECLRSFileExtractor, which in turn starts the engine's NYSETL.Engines.E1.Supervisor and actively waits for it to finish before letting NYSETL.Engines.E1.SQSTask listen for the next notification.NYSETL.Engines.E1.Supervisor starts two children: NYSETL.Engines.E1.State, which keeps track of the main process's progress, and NYSETL.Engines.E1.Broadway which orchestrates a two-step Broadway pipeline to process all rows in the input file. Rows are read from the ECLRS file by NYSETL.Engines.E1.FileReader, and then converted from plain strings to NYSETL.Engines.E1.Messages which contain the raw row, its checksum, and a Map with the data, prepared for the database. These messages are then processed by NYSETL.Engines.E1.Processor which stores them in the test_results table along with some meta-data in the abouts table (if the information is new) or just updates the corresponding record in the abouts table (if the ECLRS row has been seen before).At the end of the import round, some summary statistics is stored in the files table.Notes:The files table has a unique index on the file path to make sure we don't import the same file twice. This worked well when the files were stored orderly on the server, but since we switched to on-the-fly downloading to a random tmp path, the uniquiness constraint is moot.","ref":"engines.html#e1-eclrs-extractor","title":"Viaduct Engines - E1: ECLRS extractor","type":"extras"},{"doc":"NYSETL.Engines.E2.*: A Broadway pipeline that runs continuously.NYSETL.Engines.E2.TestResultProducer queries the database for test_results records that have no finished-state test_result_events record and makes them available to the pipeline. NYSETL.Engines.E2.Processor.process/2 processes the records one by one in parallel like so:Find a person in the people table that matches patient key, or exact combination of date of birth, last name and first name. If none found, create one.Look up index cases in the same county of the test result, creating a new one if necessary.For the index case(s) in the previous step, update lab result records with the &quot;accession number&quot; in the test result. If an index case does not have a lab result with that accession number, create one.Notes:&quot;Update&quot; means add-if-missing. Viaduct never overwrites existing data.While idling, the producer polls the database every 5 seconds for unprocessed test result records. While processing, it polls every 100 ms or when requested by Broadway.A single ECLRS row, which contains information about one test result, may result in several lab result records being created if the &quot;person&quot; in Viaduct has more than one index case in the county of the test result.For historical reasons, Engine 2 borrows the NYSETL.Engines.E1.Cache library from Engine 1.First names are split on spaces, and the first part gets used. e.g. a first name of &quot;Mary Ann&quot; would match on &quot;Mary&quot;.","ref":"engines.html#e2-eclrs-commcare-transformer","title":"Viaduct Engines - E2: ECLRS-&gt;CommCare Transformer","type":"extras"},{"doc":"NYSETL.Engines.E3.*: A Broadway pipeline that runs continuously.NYSETL.Engines.E3.IndexCaseProducer queries the database for index cases that have not been enqueued since they were last updated. All such index cases are enqueued in Oban for processing by NYSETL.Engines.E4.CommcareCaseLoader.Notes:While idling, the producer polls the database every 5 seconds for enqueueable index cases. While processing, it polls every second or when requested by Broadway.","ref":"engines.html#e3-commcare-enqueuer","title":"Viaduct Engines - E3: CommCare Enqueuer","type":"extras"},{"doc":"NYSETL.Engines.E4.*: An Oban Worker that is retried up to 20 times over a number of days.NYSETL.Engines.E4.CommcareCaseLoader creates or updates an index case with all its lab results to the county domain in CommCare where it belongs. Before posting, NYSETL.Engines.E4.CaseTransferChain is used to determine if the index case has been transferred to another county domain within CommCare. If so, NYSETL.Engines.E4.CaseTransferChain tries to find the index case in the transfer destination county domain and update that one instead.Notes:A single ECLRS row, which contains information about one test result, may result in several lab result records being created if the &quot;person&quot; in Viaduct has more than one index case in the county of the test result. The index cases, and thus the lab results, are enqueued separately and posted separately to CommCare.A transfer chain can be long and winding and might even be circular. Sometimes it is not possible to find the final index case in the chain. Sometimes it would be possible, but it's not sure that implementing a solution would be an overall gain: it might solve some case but make the whole system too complicated to reason about.If a final-destination index case cannot be found, it is always the case that the same lab result that Viaduct is trying to publish can also be found on another index case, often in the right county. For that reason, broken transfer chains are rarely a problem.","ref":"engines.html#e4-commcare-case-loader","title":"Viaduct Engines - E4: CommCare Case Loader","type":"extras"},{"doc":"NYSETL.Engines.E5.*: A Broadway pipeline that runs continuously.NYSETL.Engines.E5.Producer wakes up every five minutes and polls CommCare for all changes to index cases since midnight. It works its way through the counties list (in reverse alphabetical order), downloading index cases and their lab results. NYSETL.Engines.E5.Processor processes the cases according to the first rule that matches:An index case with this case_id exists in our DB:Update the case with changes from CommCare, but ignore any new lab results.A person exists that can be matched by dob + last_name + first_name:Create an index case linked to the person and lab results linked to the index case.If no matching case or person exists, the data from CommCare is ignored.Notes:We're polling for changes since midnight since that is what we thought the API allowed. We've since found how to express a timestamp that would allow us to fetch changes since any time, and we should fix that at some point.The data we sync down is used when merging records in Engine 3. It is not (yet) used to figure out transfer chains for Engine 4.","ref":"engines.html#e5-commcare-extractor","title":"Viaduct Engines - E5: CommCare Extractor","type":"extras"},{"doc":"Performance statisticsThese stats are generated using data from 2021-10-19 to 2021-11-29 and encompass ~300,000 unique test results. We chose 2021-10-19 as the cutoff, because on 2021-10-18 we replaced a Broadway implementation with Oban to dramatically speed up test result processing.Viaduct processes ECLRS files much faster than ECLRS can send them. ECLRS sends files every 30 minutes, and Viaduct processes an ECLRS file in ~15 seconds.NYSETL.Engines.E4.CommcareCaseLoader and NYSETL.Engines.E5.Broadway make API calls to CommCare, and so are subject to network connectivity and CommCare API's responsiveness.","ref":"performance.html","title":"Performance statistics","type":"extras"},{"doc":"ECLRS exports the previous 2 weeks' worth of positive test results.NYSETL.Engines.E1.ECLRSFileExtractor.extract!/1 and NYSETL.Engines.E1.Processor.process/1 work together to process an individual file, saving any unique test result rows to the database.Average time to parse: 14.6 seconds (2.3 seconds standard deviation)select avg(how_long), stddev(how_long) from ( select extract( epoch from processing_completed_at - processing_started_at ) as how_long from files where processing_completed_at is not null and inserted_at &gt;= '2021-10-19' ) as how_long_query;","ref":"performance.html#processing-eclrs-files","title":"Performance statistics - Processing ECLRS files","type":"extras"},{"doc":"NYSETL.Engines.E2.Processor.process/2 processes an individual test result, and creates or updates index cases and lab results within the Viaduct database.Average time to process: 3.9 seconds (3.7 seconds standard deviation)select avg(how_long), stddev(how_long) from ( select extract( epoch from completed_at - inserted_at ) as how_long from oban_jobs where worker = 'NYSETL.Engines.E2.TestResultProcessor' and inserted_at &gt;= '2021-10-19' and completed_at is not null ) as how_long_query;","ref":"performance.html#preparing-test-results-for-commcare","title":"Performance statistics - Preparing test results for CommCare","type":"extras"},{"doc":"NYSETL.Engines.E3.Broadway identifies any cases that need to be uploaded to CommCare. NYSETL.Engines.E4.CommcareCaseLoader.perform/1 uploads changed index case data.Average time to upload: 3.5 seconds (109 seconds standard deviation)select avg(how_long), stddev(how_long) from ( select extract( epoch from completed_at - inserted_at ) as how_long, attempt from oban_jobs where worker = 'NYSETL.Engines.E4.CommcareCaseLoader' and inserted_at &gt;= '2021-10-19' and completed_at is not null ) as how_long_query;","ref":"performance.html#uploading-to-commcare","title":"Performance statistics - Uploading to CommCare","type":"extras"},{"doc":"NYSETL.Engines.E5.Producer.handle_demand/2 continually polls CommCare domains for any cases that have changed since they were previously polled. It doesn't record data to the database, so we can't produce statistics with a SQL query.It does log the times at which it makes API requests, and includes the text e.g. extracting domain=ny-monroe-cdcms. We produced these statistic by grepping a single day's log file for those lines, and then calculating the time differences in a spreadsheet.Average time to process a CommCare domain: 29 seconds (1 minute, 7 seconds standard deviation)","ref":"performance.html#importing-from-commcare","title":"Performance statistics - Importing from CommCare","type":"extras"},{"doc":"Integration TestingIntegration testing in this context means processing test results locally in the development environment, and uploading any created / updated index cases and test results to Dimagi.By default, the dev environment does not run the NYSETL.ViaductSupervisor and so does not run any engines. This gives you more control over the process - you can run each stage of the workflow manually.The basic process for integration testing is:(Optionally) import any desired index cases from CommCare.Create an ECLRS file with necessary test data.Extract the file with NYSETL.Engines.E1.ECLRSFileExtractor.Process test results with NYSETL.Engines.E2.TestResultProcessor.Load index cases to CommCare with NYSETL.Engines.E4.CommcareCaseLoader.You can run the entire process automatically with NYSETL.ViaductSupervisor.start_link/1. The only thing you'll need to manually do is extract the ECLRS file (because there will be no SQS event for NYSETL.Engines.E1.SQSTask to read).","ref":"integration_testing.html","title":"Integration Testing","type":"extras"},{"doc":"Make sure there's a county record that has the ID corresponding to the county code you use (e.g. id=800 tid=&quot;ny-integrations-cdcms&quot;).","ref":"integration_testing.html#county-setup","title":"Integration Testing - County setup","type":"extras"},{"doc":"It is probably easiest to manually import index cases from CommCare, extract an ECLRS file, and then let Viaduct handle the rest. This means running Oban and E3:Oban.start_link(Application.get_env(:nys_etl, Oban)) NYSETL.Engines.E2.TestResultProducer.start_link() NYSETL.Engines.E3.Supervisor.start_link()","ref":"integration_testing.html#partial-automation","title":"Integration Testing - Partial automation","type":"extras"},{"doc":"To manually import cases one at a time:# Get a reference to the county struct county = NYSETL.Commcare.County.participating_counties() |&gt; Enum.find(&amp; &amp;1.domain == &quot;ny-integrations-cdcms&quot;) # Fetch the case {:ok, cc} = NYSETL.Commcare.Api.get_case( commcare_case_id: &quot;96204059-54b2-401d-b68e-db92030fda02&quot;, county_domain: &quot;ny-integrations-cdcms&quot; ) # Import the case data NYSETL.Engines.E5.Processor.process(case: cc, county: county)","ref":"integration_testing.html#import-index-cases-from-commcare","title":"Integration Testing - Import index cases from CommCare","type":"extras"},{"doc":"Copy a file from test/fixtures/eclrs and edit it. Assign each test result:the correct first name, last name, and date of birth (if it is to correspond to imported people / cases)a unique accession numbera unique patient keya county code that maps to a domain (e.g. 800 for &quot;ny-integrations-cdcms&quot;)","ref":"integration_testing.html#create-an-eclrs-file","title":"Integration Testing - Create an ECLRS file","type":"extras"},{"doc":"Using NYSETL.Engines.E1.ECLRSFileExtractor.extract!/1 (with Oban running):NYSETL.Engines.E1.ECLRSFileExtractor.extract!(&quot;path/to/file.txt&quot;)Using NYSETL.Engines.E1.ECLRSFileExtractor.extract/1 (without Oban running):NYSETL.Engines.E1.ECLRSFileExtractor.extract(&quot;path/to/file.txt&quot;) NYSETL.Engines.E1.ECLRSFileExtractor.wait() NYSETL.Engines.E1.ECLRSFileExtractor.stop()","ref":"integration_testing.html#extract-the-file","title":"Integration Testing - Extract the file","type":"extras"},{"doc":"Using NYSETL.Engines.E2.TestResultProcessor.perform/1:NYSETL.Engines.E2.TestResultProcessor.process(%{args: %{&quot;test_result_id&quot; =&gt; 1}})","ref":"integration_testing.html#process-test-result","title":"Integration Testing - Process test result","type":"extras"},{"doc":"Using NYSETL.Engines.E4.CommcareCaseLoader.perform/1:county = NYSETL.Commcare.County.participating_counties() |&gt; Enum.find(&amp; &amp;1.domain == &quot;ny-integrations-cdcms&quot;) NYSETL.Engines.E4.CommcareCaseLoader.perform(%{ args: %{ &quot;case_id&quot; =&gt; &quot;96204059-54b2-401d-b68e-db92030fda02&quot;, &quot;county_id&quot; =&gt; county.fips } })","ref":"integration_testing.html#load-index-case-to-commcare","title":"Integration Testing - Load index case to CommCare","type":"extras"}]